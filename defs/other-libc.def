%url=https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gcc/Other-Builtins.html#Other-Builtins
%header=6.59 Other Built-in Functions Provided by GCC (libc functions)
# Outside strict ISO C mode (-ansi, -std=c90, -std=c99 or -std=c11), the functions _exit, alloca, bcmp, bzero, dcgettext, dgettext, dremf, dreml, drem, exp10f, exp10l, exp10, ffsll, ffsl, ffs, fprintf_unlocked, fputs_unlocked, gammaf, gammal, gamma, gammaf_r, gammal_r, gamma_r, gettext, index, isascii, j0f, j0l, j0, j1f, j1l, j1, jnf, jnl, jn, lgammaf_r, lgammal_r, lgamma_r, mempcpy, pow10f, pow10l, pow10, printf_unlocked, rindex, scalbf, scalbl, scalb, signbit, signbitf, signbitl, signbitd32, signbitd64, signbitd128, significandf, significandl, significand, sincosf, sincosl, sincos, stpcpy, stpncpy, strcasecmp, strdup, strfmon, strncasecmp, strndup, toascii, y0f, y0l, y0, y1f, y1l, y1, ynf, ynl and yn may be handled as built-in functions. All these functions have corresponding versions prefixed with __builtin_, which may be used even in strict C90 mode.
__builtin__exit
#__builtin_alloca
__builtin_bcmp
__builtin_bzero
__builtin_dcgettext
__builtin_dgettext
__builtin_dremf
__builtin_dreml
__builtin_drem
__builtin_exp10f
__builtin_exp10l
__builtin_exp10
#__builtin_ffsll
#__builtin_ffsl
#__builtin_ffs
__builtin_fprintf_unlocked
__builtin_fputs_unlocked
__builtin_gammaf
__builtin_gammal
__builtin_gamma
__builtin_gammaf_r
__builtin_gammal_r
__builtin_gamma_r
__builtin_gettext
__builtin_index
__builtin_isascii
__builtin_j0f
__builtin_j0l
__builtin_j0
__builtin_j1f
__builtin_j1l
__builtin_j1
__builtin_jnf
__builtin_jnl
__builtin_jn
__builtin_lgammaf_r
__builtin_lgammal_r
__builtin_lgamma_r
__builtin_mempcpy
__builtin_pow10f
__builtin_pow10l
__builtin_pow10
__builtin_printf_unlocked
__builtin_rindex
__builtin_scalbf
__builtin_scalbl
__builtin_scalb
__builtin_signbit
__builtin_signbitf
__builtin_signbitl
__builtin_signbitd32
__builtin_signbitd64
__builtin_signbitd128
__builtin_significandf
__builtin_significandl
__builtin_significand
__builtin_sincosf
__builtin_sincosl
__builtin_sincos
__builtin_stpcpy
__builtin_stpncpy
__builtin_strcasecmp
__builtin_strdup
__builtin_strfmon
__builtin_strncasecmp
__builtin_strndup
__builtin_toascii
__builtin_y0f
__builtin_y0l
__builtin_y0
__builtin_y1f
__builtin_y1l
__builtin_y1
__builtin_ynf
__builtin_ynl
__builtin_yn
# The ISO C99 functions _Exit, acoshf, acoshl, acosh, asinhf, asinhl, asinh, atanhf, atanhl, atanh, cabsf, cabsl, cabs, cacosf, cacoshf, cacoshl, cacosh, cacosl, cacos, cargf, cargl, carg, casinf, casinhf, casinhl, casinh, casinl, casin, catanf, catanhf, catanhl, catanh, catanl, catan, cbrtf, cbrtl, cbrt, ccosf, ccoshf, ccoshl, ccosh, ccosl, ccos, cexpf, cexpl, cexp, cimagf, cimagl, cimag, clogf, clogl, clog, conjf, conjl, conj, copysignf, copysignl, copysign, cpowf, cpowl, cpow, cprojf, cprojl, cproj, crealf, creall, creal, csinf, csinhf, csinhl, csinh, csinl, csin, csqrtf, csqrtl, csqrt, ctanf, ctanhf, ctanhl, ctanh, ctanl, ctan, erfcf, erfcl, erfc, erff, erfl, erf, exp2f, exp2l, exp2, expm1f, expm1l, expm1, fdimf, fdiml, fdim, fmaf, fmal, fmaxf, fmaxl, fmax, fma, fminf, fminl, fmin, hypotf, hypotl, hypot, ilogbf, ilogbl, ilogb, imaxabs, isblank, iswblank, lgammaf, lgammal, lgamma, llabs, llrintf, llrintl, llrint, llroundf, llroundl, llround, log1pf, log1pl, log1p, log2f, log2l, log2, logbf, logbl, logb, lrintf, lrintl, lrint, lroundf, lroundl, lround, nearbyintf, nearbyintl, nearbyint, nextafterf, nextafterl, nextafter, nexttowardf, nexttowardl, nexttoward, remainderf, remainderl, remainder, remquof, remquol, remquo, rintf, rintl, rint, roundf, roundl, round, scalblnf, scalblnl, scalbln, scalbnf, scalbnl, scalbn, snprintf, tgammaf, tgammal, tgamma, truncf, truncl, trunc, vfscanf, vscanf, vsnprintf and vsscanf are handled as built-in functions except in strict ISO C90 mode (-ansi or -std=c90).
__builtin__Exit
__builtin_acoshf
__builtin_acoshl
__builtin_acosh
__builtin_asinhf
__builtin_asinhl
__builtin_asinh
__builtin_atanhf
__builtin_atanhl
__builtin_atanh
__builtin_cabsf
__builtin_cabsl
__builtin_cabs
__builtin_cacosf
__builtin_cacoshf
__builtin_cacoshl
__builtin_cacosh
__builtin_cacosl
__builtin_cacos
__builtin_cargf
__builtin_cargl
__builtin_carg
__builtin_casinf
__builtin_casinhf
__builtin_casinhl
__builtin_casinh
__builtin_casinl
__builtin_casin
__builtin_catanf
__builtin_catanhf
__builtin_catanhl
__builtin_catanh
__builtin_catanl
__builtin_catan
__builtin_cbrtf
__builtin_cbrtl
__builtin_cbrt
__builtin_ccosf
__builtin_ccoshf
__builtin_ccoshl
__builtin_ccosh
__builtin_ccosl
__builtin_ccos
__builtin_cexpf
__builtin_cexpl
__builtin_cexp
__builtin_cimagf
__builtin_cimagl
__builtin_cimag
__builtin_clogf
__builtin_clogl
__builtin_clog
__builtin_conjf
__builtin_conjl
__builtin_conj
__builtin_copysignf
__builtin_copysignl
__builtin_copysign
__builtin_cpowf
__builtin_cpowl
__builtin_cpow
__builtin_cprojf
__builtin_cprojl
__builtin_cproj
__builtin_crealf
__builtin_creall
__builtin_creal
__builtin_csinf
__builtin_csinhf
__builtin_csinhl
__builtin_csinh
__builtin_csinl
__builtin_csin
__builtin_csqrtf
__builtin_csqrtl
__builtin_csqrt
__builtin_ctanf
__builtin_ctanhf
__builtin_ctanhl
__builtin_ctanh
__builtin_ctanl
__builtin_ctan
__builtin_erfcf
__builtin_erfcl
__builtin_erfc
__builtin_erff
__builtin_erfl
__builtin_erf
__builtin_exp2f
__builtin_exp2l
__builtin_exp2
__builtin_expm1f
__builtin_expm1l
__builtin_expm1
__builtin_fdimf
__builtin_fdiml
__builtin_fdim
__builtin_fmaf
__builtin_fmal
__builtin_fmaxf
__builtin_fmaxl
__builtin_fmax
__builtin_fma
__builtin_fminf
__builtin_fminl
__builtin_fmin
__builtin_hypotf
__builtin_hypotl
__builtin_hypot
__builtin_ilogbf
__builtin_ilogbl
__builtin_ilogb
__builtin_imaxabs
__builtin_isblank
__builtin_iswblank
__builtin_lgammaf
__builtin_lgammal
__builtin_lgamma
__builtin_llabs
__builtin_llrintf
__builtin_llrintl
__builtin_llrint
__builtin_llroundf
__builtin_llroundl
__builtin_llround
__builtin_log1pf
__builtin_log1pl
__builtin_log1p
__builtin_log2f
__builtin_log2l
__builtin_log2
__builtin_logbf
__builtin_logbl
__builtin_logb
__builtin_lrintf
__builtin_lrintl
__builtin_lrint
__builtin_lroundf
__builtin_lroundl
__builtin_lround
__builtin_nearbyintf
__builtin_nearbyintl
__builtin_nearbyint
__builtin_nextafterf
__builtin_nextafterl
__builtin_nextafter
__builtin_nexttowardf
__builtin_nexttowardl
__builtin_nexttoward
__builtin_remainderf
__builtin_remainderl
__builtin_remainder
__builtin_remquof
__builtin_remquol
__builtin_remquo
__builtin_rintf
__builtin_rintl
__builtin_rint
__builtin_roundf
__builtin_roundl
__builtin_round
__builtin_scalblnf
__builtin_scalblnl
__builtin_scalbln
__builtin_scalbnf
__builtin_scalbnl
__builtin_scalbn
__builtin_tgammaf
__builtin_tgammal
__builtin_tgamma
__builtin_truncf
__builtin_truncl
__builtin_trunc
__builtin_vfscanf
__builtin_vscanf
__builtin_vsnprintf
__builtin_vsscanf
# There are also built-in versions of the ISO C99 functions acosf, acosl, asinf, asinl, atan2f, atan2l, atanf, atanl, ceilf, ceill, cosf, coshf, coshl, cosl, expf, expl, fabsf, fabsl, floorf, floorl, fmodf, fmodl, frexpf, frexpl, ldexpf, ldexpl, log10f, log10l, logf, logl, modfl, modf, powf, powl, sinf, sinhf, sinhl, sinl, sqrtf, sqrtl, tanf, tanhf, tanhl and tanl that are recognized in any mode since ISO C90 reserves these names for the purpose to which ISO C99 puts them. All these functions have corresponding versions prefixed with __builtin_.
__builtin_acosf
__builtin_acosl
__builtin_asinf
__builtin_asinl
__builtin_atan2f
__builtin_atan2l
__builtin_atanf
__builtin_atanl
__builtin_ceilf
__builtin_ceill
__builtin_cosf
__builtin_coshf
__builtin_coshl
__builtin_cosl
__builtin_expf
__builtin_expl
__builtin_fabsf
__builtin_fabsl
__builtin_floorf
__builtin_floorl
#__builtin_fmodf
__builtin_fmodl
__builtin_frexpf
__builtin_frexpl
__builtin_ldexpf
__builtin_ldexpl
__builtin_log10f
__builtin_log10l
__builtin_logf
__builtin_logl
__builtin_modfl
#__builtin_modf
__builtin_powf
__builtin_powl
__builtin_sinf
__builtin_sinhf
__builtin_sinhl
__builtin_sinl
__builtin_sqrtf
__builtin_sqrtl
__builtin_tanf
__builtin_tanhf
__builtin_tanhl
__builtin_tanl
# There are also built-in functions __builtin_fabsfn, __builtin_fabsfnx, __builtin_copysignfn and __builtin_copysignfnx, corresponding to the TS 18661-3 functions fabsfn, fabsfnx, copysignfn and copysignfnx, for supported types _Floatn and _Floatnx.
__builtin_fabsfn
__builtin_fabsfnx
__builtin_copysignfn
__builtin_copysignfnx
# There are also GNU extension functions clog10, clog10f and clog10l which names are reserved by ISO C99 for future use. All these functions have versions prefixed with __builtin_.
__builtin_clog10
__builtin_clog10f
__builtin_clog10l
# The ISO C90 functions abort, abs, acos, asin, atan2, atan, calloc, ceil, cosh, cos, exit, exp, fabs, floor, fmod, fprintf, fputs, frexp, fscanf, isalnum, isalpha, iscntrl, isdigit, isgraph, islower, isprint, ispunct, isspace, isupper, isxdigit, tolower, toupper, labs, ldexp, log10, log, malloc, memchr, memcmp, memcpy, memset, modf, pow, printf, putchar, puts, scanf, sinh, sin, snprintf, sprintf, sqrt, sscanf, strcat, strchr, strcmp, strcpy, strcspn, strlen, strncat, strncmp, strncpy, strpbrk, strrchr, strspn, strstr, tanh, tan, vfprintf, vprintf and vsprintf are all recognized as built-in functions unless -fno-builtin is specified (or -fno-builtin-function is specified for an individual function). All of these functions have corresponding versions prefixed with __builtin_.
__builtin_abort
__builtin_abs
__builtin_acos
__builtin_asin
__builtin_atan2
__builtin_atan
__builtin_calloc
__builtin_ceil
__builtin_cosh
__builtin_cos
__builtin_exit
__builtin_exp
__builtin_fabs
__builtin_floor
__builtin_fmod
__builtin_fprintf
__builtin_fputs
__builtin_frexp
__builtin_fscanf
__builtin_isalnum
__builtin_isalpha
__builtin_iscntrl
__builtin_isdigit
__builtin_isgraph
__builtin_islower
__builtin_isprint
__builtin_ispunct
__builtin_isspace
__builtin_isupper
__builtin_isxdigit
__builtin_tolower
__builtin_toupper
__builtin_labs
__builtin_ldexp
__builtin_log10
__builtin_log
__builtin_malloc
__builtin_memchr
__builtin_memcmp
__builtin_memcpy
__builtin_memset
__builtin_modf
__builtin_pow
__builtin_printf
__builtin_putchar
__builtin_puts
__builtin_scanf
__builtin_sinh
__builtin_sin
__builtin_snprintf
__builtin_sprintf
__builtin_sqrt
__builtin_sscanf
__builtin_strcat
__builtin_strchr
__builtin_strcmp
__builtin_strcpy
__builtin_strcspn
__builtin_strlen
__builtin_strncat
__builtin_strncmp
__builtin_strncpy
__builtin_strpbrk
__builtin_strrchr
__builtin_strspn
__builtin_strstr
__builtin_tanh
__builtin_tan
__builtin_vfprintf
__builtin_vprintf
__builtin_vsprintf
# GCC provides built-in versions of the ISO C99 floating-point comparison macros that avoid raising exceptions for unordered operands. They have the same names as the standard macros ( isgreater, isgreaterequal, isless, islessequal, islessgreater, and isunordered) , with __builtin_ prefixed. We intend for a library implementor to be able to simply #define each standard macro to its built-in equivalent. In the same fashion, GCC provides fpclassify, isfinite, isinf_sign, isnormal and signbit built-ins used with __builtin_ prefixed. The isinf and isnan built-in functions appear both with and without the __builtin_ prefix.
__builtin_isgreater
__builtin_isgreaterequal
__builtin_isless
__builtin_islessequal
__builtin_islessgreater
__builtin_isunordered
__builtin_isinf
__builtin_isnan
